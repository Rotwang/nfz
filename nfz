#!/usr/bin/env perl6

use v6;
use JSON::Tiny;
use LWP::Simple;


sub exec-shell(:$Shell!, :$Expect = 0) {
        my $retval = shell($Shell);
        say "'$Shell' returned $retval.exitcode()" if $retval != $Expect;
        $retval == $Expect;
}

sub test-tcp(:$TCP!, :$Port!) {
        try {
                IO::Socket::INET.new(:host($TCP), :port($Port)).close;
                CATCH {
                        when X::AdHoc {
                                note "TCP: $TCP:$Port - $_";
                                return False;
                        }
                }
        }
        True;
}

sub test-url(:$URL!, :$Expect = 200) {
        #my $lwp = LWP::Simple.new();
        #$lwp.force_encoding = 'iso-8859-1';
        #my $resp;
        #try {
        #        $resp = $lwp.get($URL);
        #        CATCH {
        #                when X::AdHoc {
        #                        .payload.say;
        #                        return False;
        #                }
        #        }
        #}
        #                {"URL": "https://github.com"},
        # ssl b0rken (IO::Socket::SSL and rakudo 2015.11 incompatibility)
        my $resp;
        try {
                $resp = LWP::Simple.get($URL);
                CATCH {
                        when ($_ ~~ X::AdHoc) and ($_.payload ~~ /:i Unknown\s+string\s+encoding\s*:/) {
                                $resp = True;
                        }
                        default { note "URL: $URL - $_"; }
                }
        }
        $resp.defined;
}

sub dispatch-health-checks($config) {
        gather for from-json(slurp $config)<HealthCheck>.values -> %h {
                when 'URL' ~~ %h { take start test-url(|%h); }
                when 'TCP' ~~ %h { take start test-tcp(|%h); }
                when 'Shell' ~~ %h { take start exec-shell(|%h); }
                default { die "Unknown health check type: %h.gist()" }
        }
}


sub MAIN(Str :c(:$config) = "config.json") {
        say so (all(await dispatch-health-checks($config)) == True);
}
